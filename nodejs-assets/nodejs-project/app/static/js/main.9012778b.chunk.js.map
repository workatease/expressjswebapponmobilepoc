{"version":3,"sources":["features/counter/Counter.module.css","features/counter/counterSlice.js","features/counter/Counter.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","data","reducers","getTable","state","action","payload","actions","incrementByAmount","dispatch","axios","put","then","respone","console","log","getList","get","response","counter","Counter","rows","useSelector","useDispatch","useState","incrementAmount","setIncrementAmount","useEffect","length","className","styles","row","textbox","aria-label","onChange","e","target","button","onClick","amount","Number","id","Object","keys","map","key","index","toUpperCase","App","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oKACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD,+ICCjJC,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,EACPC,KAAM,IAERC,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMH,KAAOI,EAAOC,YAMXH,EAAaP,EAAaW,QAA1BJ,SAYFK,EAAoB,SAACH,GAAD,OAAY,SAAAI,GAC3CC,IAAMC,IAAI,WAAYN,GACnBO,MAAK,SAAUC,GACdC,QAAQC,IAAIF,GACZJ,EAASO,UAIFA,EAAU,kBAAM,SAAAP,GAC3BC,IAAMO,IAAI,gBACPL,MAAK,SAAUM,GAEdT,EAASN,EAASe,EAASjB,YAUpBA,EAAO,SAAAG,GAAK,OAAIA,EAAMe,QAAQlB,MAG5BL,IAAf,Q,gBC7CO,SAASwB,IAEd,IAAMC,EAAOC,YAAYrB,GACnBQ,EAAWc,cAHO,EAIsBC,mBAAS,KAJ/B,mBAIjBC,EAJiB,KAIAC,EAJA,KAKxBC,qBAAU,WACU,IAAdN,EAAKO,QACPnB,EAASO,OAEV,CAACK,EAAMZ,IA0BV,OACE,6BACE,yBAAKoB,UAAWC,IAAOC,KACrB,2BACEF,UAAWC,IAAOE,QAClBC,aAAW,uBACXjC,MAAOyB,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAmBS,EAAEC,OAAOpC,WAG/C,yBAAK6B,UAAWC,IAAOC,KACrB,4BACEF,UAAWC,IAAOO,OAClBC,QAAS,kBACP7B,EAASD,EAAkB,CAAE+B,OAAQC,OAAOf,IAAoB,EAAG3B,KAAM,cAH7E,qBADF,QASE,4BACE+B,UAAWC,IAAOO,OAClBC,QAAS,kBACP7B,EAASD,EAAkB,CAAE+B,OAAQC,OAAOf,IAAoB,EAAG3B,KAAM,aAH7E,qBASF,yBAAK+B,UAAWC,IAAOC,KACrB,4BACEF,UAAWC,IAAOO,OAClBC,QAAS,kBACP7B,EAASD,EAAkB,CAAE+B,OAAQC,OAAOf,IAAoB,EAAG3B,KAAM,YAH7E,mBADF,QASE,4BACE+B,UAAWC,IAAOO,OAClBC,QAAS,kBACP7B,EAASD,EAAkB,CAAE+B,OAAQC,OAAOf,IAAoB,EAAG3B,KAAM,YAH7E,oBASF,yBAAK+B,UAAWC,IAAOC,KACrB,2BAAOU,GAAG,YACR,+BACE,4BA3DJpB,EAAKO,OAAS,EACHc,OAAOC,KAAKtB,EAAK,IAChBuB,KAAI,SAACC,EAAKC,GACtB,OAAO,wBAAID,IAAKC,GAAQD,EAAIE,kBAGvB,MAnBF1B,EAAKuB,KAAI,SAACb,EAAKe,GAAW,IACvBD,EAAed,EAAfc,IAAK7C,EAAU+B,EAAV/B,MACb,OACE,wBAAI6C,IAAKA,GACP,4BAAKA,GACL,4BAAK7C,W,kBCNAgD,MAbf,WACE,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,SAAD,eACA,kBAAC,UAAD,gBAEA,kBAACT,EAAD,SCVO6B,cAAe,CAC5BC,QAAS,CACP/B,QAASgC,KCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.9012778b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__P-W9b\",\"value\":\"Counter_value__5IIz2\",\"button\":\"Counter_button__-Q8bU\",\"textbox\":\"Counter_textbox__IJp6v\",\"asyncButton\":\"Counter_asyncButton__2Sr_Q Counter_button__-Q8bU\"};","import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n    data: [],\r\n  },\r\n  reducers: {\r\n    getTable: (state, action) => {\r\n      state.data = action.payload;     \r\n    },\r\n\r\n  },\r\n});\r\n\r\nexport const { getTable } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\nexport const incrementByAmount = (action) => dispatch => {\r\n  axios.put('/api/add', action)\r\n    .then(function (respone) {\r\n      console.log(respone);\r\n      dispatch(getList());\r\n    });\r\n};\r\n\r\nexport const getList = () => dispatch => {\r\n  axios.get('/api/getList')\r\n    .then(function (response) {\r\n      // handle success\r\n      dispatch(getTable(response.data));\r\n      \r\n    });\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport const data = state => state.counter.data;\r\n\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  incrementByAmount,\r\n   getList, data\r\n} from './counterSlice';\r\nimport styles from './Counter.module.css';\r\n\r\nexport function Counter() {\r\n  \r\n  const rows = useSelector(data);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n  useEffect(() => {\r\n    if (rows.length===0) {\r\n      dispatch(getList());\r\n    }\r\n  }, [rows, dispatch]);\r\n\r\n  const renderTableData = () => {\r\n    return rows.map((row, index) => {\r\n      const { key, value } = row //destructuring\r\n      return (\r\n        <tr key={key}>\r\n          <td>{key}</td>\r\n          <td>{value}</td>\r\n        </tr>\r\n      )\r\n    })\r\n  }\r\n\r\n  const renderTableHeader = () => {\r\n\r\n    if (rows.length > 0) {\r\n      let header = Object.keys(rows[0])\r\n      return header.map((key, index) => {\r\n        return <th key={index}>{key.toUpperCase()}</th>\r\n      })\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={e => setIncrementAmount(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount({ amount: Number(incrementAmount) || 0, name: 'Deepak' }))\r\n          }\r\n        >\r\n          Add Amount Deepak\r\n        </button> &nbsp;\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount({ amount: Number(incrementAmount) || 0, name: 'Ruban' }))\r\n          }\r\n        >\r\n          Add Amount Ruban\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount({ amount: Number(incrementAmount) || 0, name: 'Siva' }))\r\n          }\r\n        >\r\n          Add Amount Siva\r\n        </button> &nbsp;\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount({ amount: Number(incrementAmount) || 0, name: 'Pyll' }))\r\n          }\r\n        >\r\n          Add Amount Pyll\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <table id=\"students\">\r\n          <tbody>\r\n            <tr>{renderTableHeader()}</tr>\r\n            {renderTableData()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n    </div >\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport { Counter } from './features/counter/Counter';\r\nimport { Offline, Online } from \"react-detect-offline\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Online>Online</Online>\r\n        <Offline>Offline</Offline>\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <Counter />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}